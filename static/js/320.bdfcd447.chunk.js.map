{"version":3,"file":"static/js/320.bdfcd447.chunk.js","mappings":"4MACA,EAA2B,8BAA3B,EAA0E,oCAA1E,EAAiI,sCAAjI,EAA6K,yBCDhKA,EACX,mECmBSC,EAAS,WAGlB,IAHiC,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtBG,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWR,IAC3CA,KACLI,GAAMN,EAA0B,GAAdO,EAAML,IAE1B,OAAOI,CACT,E,6BCnBMK,EAAc,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,SAASG,KAAK,IACnEC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA2BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhCE,EAAKD,EAAA,GAAEE,EAASF,EAAA,GACvBG,GAAoCT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA3CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,IAWhCG,EAAAA,EAAAA,YAAU,WACJF,GACFlB,GAASqB,EAAAA,EAAAA,IAAiBH,GAE9B,GAAG,CAAClB,EAAUkB,IA2Bd,OACEI,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,OAAQ,IAAKC,UACzBC,EAAAA,EAAAA,MAAA,QAAMC,SA3BS,SAAAC,GAOjB,GANAA,EAAMC,iBAEkB3B,EAAS4B,MAC/B,SAAAC,GAAO,OAAIA,EAAQrB,KAAKsB,gBAAkBtB,EAAKsB,aAAa,IAI5DC,MACE,8EAFJ,CAOA,IAAMC,EAAe,CACnBxC,GAAIL,IACJqB,KAAAA,EACAI,MAAAA,GAGFK,EAAce,GAEdN,EAAMO,cAAcC,OAVpB,CAWF,EAIgCC,UAAWC,EAAab,SAAA,EAClDC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,QAAMe,UAAWC,EAAmBb,SAAC,WACrCH,EAAAA,EAAAA,KAAA,SACEiB,KAAK,OACLC,YAAY,OACZ9B,KAAK,OACL+B,SAlDW,SAAAb,GACnB,IAAMc,EAAYd,EAAMe,OAAOC,MAAMC,OACrClC,EAAQ+B,EACV,EAgDUI,QAAQ,eACRC,UAAQ,QAGZrB,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,QAAMe,UAAWC,EAAqBb,SAAC,aACvCH,EAAAA,EAAAA,KAAA,SACEiB,KAAK,MACLC,YAAY,WACZ9B,KAAK,SACL+B,SAxDW,SAAAb,GACnB,IAAMoB,EAAcpB,EAAMe,OAAOC,MACjC7B,EAAUiC,EACZ,EAsDUF,QAAQ,SACRC,UAAQ,QAIZzB,EAAAA,EAAAA,KAAA,UAAQiB,KAAK,SAASF,UAAWC,EAAQb,SAAC,oBAMlD,ECpFMwB,EAAS,WACb,IAAMjD,GAAWC,EAAAA,EAAAA,MAMjB,OACEqB,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,OAAQ,IAAKC,UACzBC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,yBAEDH,EAAAA,EAAAA,KAAA,SACEmB,SAVa,SAAAb,GACnB,IAAMsB,EAActB,EAAMe,OAAOC,MACjC5C,GAASmD,EAAAA,EAAAA,IAAUD,GACrB,EAQQX,KAAK,OACL7B,KAAK,UACL8B,YAAY,OACZM,QAAQ,oBAKlB,E,oBCpBaM,EAA0B,SAAAhD,GAAK,OAC1CA,EAAMF,SAASA,SAASmD,SAAU,EACvBC,EAAsB,SAAAlD,GAAK,OAAIA,EAAMF,SAASA,SAASqD,KAAM,EAE7DC,GAAyBC,EAAAA,EAAAA,IACpC,CAP4B,SAAArD,GAAK,OAAIA,EAAMF,SAASA,SAASG,KAAM,EACzC,SAAAD,GAAK,OAAIA,EAAMF,SAASwD,MAAO,IAOzD,SAACxD,EAAUwD,GACT,OAAOxD,EAASwD,QAAO,SAAA3B,GAAO,OAC5BA,EAAQrB,KAAKsB,cAAc2B,SAASD,EAAOb,OAAOb,cAAc,GAEpE,ICbF,EAAuB,0BAAvB,EAA0D,4BCmBpD4B,EAAc,WAClB,IAAM5D,GAAWC,EAAAA,EAAAA,MAIXoD,GAAYlD,EAAAA,EAAAA,IAAYiD,GACxBG,GAAQpD,EAAAA,EAAAA,IAAYmD,GACpBO,GAAmB1D,EAAAA,EAAAA,IAAYqD,GAiBrC,OALApC,EAAAA,EAAAA,YAAU,WACRpB,GAAS8D,EAAAA,EAAAA,MACX,GAAG,CAAC9D,KAIFsB,EAAAA,EAAAA,KAAA,OAAAG,SACG8B,EAAK,iCAEFF,GACF/B,EAAAA,EAAAA,KAAA,OAAKe,UAAWC,EAAWb,UACzBH,EAAAA,EAAAA,KAACyC,EAAAA,EAAM,OAGTzC,EAAAA,EAAAA,KAAA,MAAAG,SACGoC,EAAiBG,KAAI,SAAAjC,GAAO,OAC3BL,EAAAA,EAAAA,MAAA,MAAIW,UAAWC,EAA2B5C,GAAIqC,EAAQrC,GAAG+B,SAAA,EACvDC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAOM,EAAQrB,KAAK,OAAQ,KAACY,EAAAA,EAAAA,KAAA,QAAAG,SAAOM,EAAQjB,SAC5CQ,EAAAA,EAAAA,KAAA,UACE2C,QAAS,WACPjE,GAASkE,EAAAA,EAAAA,IAAcnC,EAAQrC,KAC/BM,GAASmE,EAAAA,EAAAA,IAAiBpC,EAAQrC,IACpC,EAAE+B,SACH,aAP2BM,EAAQrC,GAUjC,OAMjB,ECtDA,EAZqB,WACnB,OACEgC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAIC,MAAO,CAAE6C,WAAY,IAAK3C,SAAC,eAC/BH,EAAAA,EAAAA,KAACvB,EAAW,KACZuB,EAAAA,EAAAA,KAAA,MAAIC,MAAO,CAAE6C,WAAY,IAAK3C,SAAC,cAC/BH,EAAAA,EAAAA,KAAC2B,EAAM,KACP3B,EAAAA,EAAAA,KAACsC,EAAW,MAGlB,C","sources":["webpack://react-homework-template/./src/components/ContactForm.module.css?23bd","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","components/ContactForm.jsx","components/Filter.jsx","components/redux/Contacts/contactsReducer.selectors.js","webpack://react-homework-template/./src/components/ContactList.module.css?1b57","components/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formData\":\"ContactForm_formData__DiOD-\",\"labelTitleName\":\"ContactForm_labelTitleName__PUaB8\",\"labelTitleNumber\":\"ContactForm_labelTitleNumber__EmXGX\",\"btn\":\"ContactForm_btn__-isWu\"};","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import React from 'react';\nimport css from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { apiAddNewContact } from './redux/Contacts/contactsReducer';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(store => store.contacts.contacts.items);\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n  const [newContact, setNewContact] = useState(null);\n  const handleChange = event => {\n    const nameValue = event.target.value.trim();\n    setName(nameValue);\n  };\n\n  const handleNumber = event => {\n    const numberValue = event.target.value;\n    setNumber(numberValue);\n  };\n\n  useEffect(() => {\n    if (newContact) {\n      dispatch(apiAddNewContact(newContact));\n    }\n  }, [dispatch, newContact]);\n\n  const onAddClick = event => {\n    event.preventDefault();\n\n    const isDuplicateName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isDuplicateName) {\n      alert(\n        'This name is already in the phonebook. Please choose a different name.'\n      );\n      return;\n    }\n\n    const contactToAdd = {\n      id: nanoid(),\n      name,\n      phone,\n    };\n\n    setNewContact(contactToAdd);\n\n    event.currentTarget.reset();\n  };\n\n  return (\n    <div style={{ margin: 30 }}>\n      <form onSubmit={onAddClick} className={css.formData}>\n        <label>\n          <span className={css.labelTitleName}>Name:</span>\n          <input\n            type=\"text\"\n            placeholder=\"Anna\"\n            name=\"name\"\n            onChange={handleChange}\n            pattern=\"^[A-Za-z ]*$\"\n            required\n          />\n        </label>\n        <label>\n          <span className={css.labelTitleNumber}>Number:</span>\n          <input\n            type=\"tel\"\n            placeholder=\"50102050\"\n            name=\"number\"\n            onChange={handleNumber}\n            pattern=\"[0-9]*\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={css.btn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport { ContactForm };\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from './redux/Contacts/contactsReducer';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilter = event => {\n    const filterValue = event.target.value;\n    dispatch(setFilter(filterValue));\n  };\n\n  return (\n    <div style={{ margin: 30 }}>\n      <p>\n        Find contact by name:\n        <input\n          onChange={handleFilter}\n          type=\"text\"\n          name=\"keyword\"\n          placeholder=\"Anna\"\n          pattern=\"^[A-Za-z]*$\"\n        />\n      </p>\n    </div>\n  );\n};\n\nexport { Filter };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = store => store.contacts.contacts.items;\nexport const selectFilter = store => store.contacts.filter;\nexport const selectContactsIsLoading = store =>\n  store.contacts.contacts.isLoading;\nexport const selectContactsError = store => store.contacts.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__lqdgo\",\"loader\":\"ContactList_loader__9Xzsh\"};","//import { useEffect } from 'react';\n//import { removeContact } from './redux/Contacts/contactsReducer';\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Loader } from './Loader';\nimport {\n  // selectContacts,\n  //selectFilter,\n  selectContactsIsLoading,\n  selectContactsError,\n  selectFilteredContacts,\n} from './redux/Contacts/contactsReducer.selectors';\nimport css from './ContactList.module.css';\nimport {\n  apiGetContacts,\n  apiDeleteContact,\n  removeContact,\n} from './redux/Contacts/contactsReducer';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  //const contacts = useSelector(selectContacts);\n  //const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  // const filteredContacts = contacts.filter(contact =>\n  //   contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n  // );\n\n  //-----------------------------------------------------------------------------------add to local storage\n  // useEffect(() => {\n  //   const stringifiedContacts = JSON.stringify(contacts);\n  //   localStorage.setItem('contacts', stringifiedContacts);\n  // }, [contacts]);\n  //-----------------------------------------------------------------------------------add to local storage\n  useEffect(() => {\n    dispatch(apiGetContacts());\n  }, [dispatch]);\n\n  //-----------------------------------------------------------------------------------------------------------------------------------------------\n  return (\n    <div>\n      {error ? (\n        `Ooppsss, some error occured!!!`\n      ) : isLoading ? (\n        <div className={css.loader}>\n          <Loader />\n        </div>\n      ) : (\n        <ul>\n          {filteredContacts.map(contact => (\n            <li className={css.list} key={contact.id} id={contact.id}>\n              <span>{contact.name}:</span> <span>{contact.phone}</span>\n              <button\n                onClick={() => {\n                  dispatch(removeContact(contact.id));\n                  dispatch(apiDeleteContact(contact.id));\n                }}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport { ContactList };\n","import React from 'react';\nimport { ContactForm } from '../components/ContactForm';\nimport { Filter } from '../components/Filter';\nimport { ContactList } from '../components/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <h1 style={{ marginLeft: 30 }}>Phonebook</h1>\n      <ContactForm />\n      <h2 style={{ marginLeft: 30 }}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["urlAlphabet","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","ContactForm","dispatch","useDispatch","contacts","useSelector","store","items","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setNumber","_useState5","_useState6","newContact","setNewContact","useEffect","apiAddNewContact","_jsx","style","margin","children","_jsxs","onSubmit","event","preventDefault","some","contact","toLowerCase","alert","contactToAdd","currentTarget","reset","className","css","type","placeholder","onChange","nameValue","target","value","trim","pattern","required","numberValue","Filter","filterValue","setFilter","selectContactsIsLoading","isLoading","selectContactsError","error","selectFilteredContacts","createSelector","filter","includes","ContactList","filteredContacts","apiGetContacts","Loader","map","onClick","removeContact","apiDeleteContact","marginLeft"],"sourceRoot":""}